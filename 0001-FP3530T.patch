From d6961522820810a80d0848d4319978e00ac514c0 Mon Sep 17 00:00:00 2001
From: Oleg <olegsh1264@gmail.com>
Date: Mon, 19 Mar 2018 23:20:58 +0200
Subject: [PATCH 1/2] =?UTF-8?q?=D0=9F=D0=B5=D1=87=D0=B0=D1=82=D1=8C=20?=
 =?UTF-8?q?=D0=BD=D0=B5=20=D1=84=D0=B8=D1=81=D0=BA=D0=B0=D0=BB=D1=8C=D0=BD?=
 =?UTF-8?q?=D1=8B=D1=85=20=D1=87=D0=B5=D0=BA=D0=BE=D0=B2=20=D0=BD=D0=B0=20?=
 =?UTF-8?q?FP3530T?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 FormsFarmacy/Cash/Cash_FP3530T.pas     | 51 ++++++++++++++++++++++++++++++++--
 FormsFarmacy/Cash/Cash_FP3530T_NEW.pas | 46 ++++++++++++++++++++++++++++--
 2 files changed, 92 insertions(+), 5 deletions(-)

diff --git a/FormsFarmacy/Cash/Cash_FP3530T.pas b/FormsFarmacy/Cash/Cash_FP3530T.pas
index 87d43a29b..19e43c65c 100644
--- a/FormsFarmacy/Cash/Cash_FP3530T.pas
+++ b/FormsFarmacy/Cash/Cash_FP3530T.pas
@@ -7,6 +7,8 @@ type
   private
     Table: TTable;
     FAlwaysSold: boolean;
+    FisFiscal: boolean;
+    FLengNoFiscalText : integer;
     procedure SetAlwaysSold(Value: boolean);
     function GetAlwaysSold: boolean;
   protected
@@ -42,7 +44,7 @@ type
 
 
 implementation
-uses Forms, SysUtils, Dialogs, Math, Variants, BDE;
+uses Forms, SysUtils, Dialogs, Math, Variants, BDE, RegularExpressions;
 
 type
   RetData = record
@@ -88,6 +90,9 @@ function    ChangeArticlePrice(hWin:HWND; fun:TMathFunc; par:LPARAM; cod:integer
 function    GetArticleInfo(hWin:HWND; fun:TMathFunc; par:LPARAM; cod:integer):integer; stdcall  ;external 'fpl.dll' name 'GetArticleInfo';
 function    SetDateTime(hWin: HWND; fun: TMathFunc; par: LPARAM; n1, n2: LPSTR): integer; stdcall; external 'fpl.dll' name 'SetDateTime';
 
+function    OpenNonfiscalReceipt(hWin:HWND; fun:TMathFunc; par:LPARAM):integer; stdcall; external 'fpl.dll' name 'OpenNonfiscalReceipt';
+function    CloseNonfiscalReceipt(hWin:HWND; fun:TMathFunc; par:LPARAM):integer; stdcall; external 'fpl.dll' name 'CloseNonfiscalReceipt';
+
   CONST
 
   WM_FPRESPONSE = $1099;
@@ -192,6 +197,7 @@ begin
   FAlwaysSold:=false;
   InitFPport(1, 19200);
   SetDecimals(2);
+  FLengNoFiscalText := 35;
   Table:= TTable.Create(nil);
   Table.TableName:='CashAttachment.db';
   Table.Open;
@@ -215,7 +221,8 @@ begin
     while s=0 do Application.ProcessMessages;
 
     s:=0;
-    CloseFiscalReceipt(0, PrinterResults, 0);
+    if FisFiscal then CloseFiscalReceipt(0, PrinterResults, 0)
+    else CloseNonfiscalReceipt(0, PrinterResults, 0);
     while s=0 do Application.ProcessMessages;
 
   except
@@ -244,7 +251,8 @@ begin
     status:= 0;
     if FAlwaysSold then exit;
     s:=0;
-    OpenFiscalReceipt(0, PrinterResults, 0, 1,'0000',0, true);
+    if FisFiscal then OpenFiscalReceipt(0, PrinterResults, 0, 1,'0000',0, true)
+    else OpenNonfiscalReceipt(0, PrinterResults, 0);
     while s=0 do Application.ProcessMessages;
 
     s:=0;
@@ -301,6 +309,9 @@ end;
 function TCashFP3530T.SoldFromPC(const GoodsCode: integer; const GoodsName: string; const Amount, Price, NDS: double): boolean;
 var NDSType: char;
     CashCode: integer;
+    I : Integer;
+    L : string;
+    Res: TArray<string>;
 begin
   result := true;
   try
@@ -309,6 +320,39 @@ begin
     result:= true;
     if FAlwaysSold then exit;
 
+      // печать нефискального чека
+    if not FisFiscal then
+    begin
+
+      L := '';
+      Res := TRegEx.Split(GoodsName, ' ');
+      for I := 0 to High(Res) do
+      begin
+        if L <> '' then L := L + ' ';
+        L := L + Res[i];
+        if (I < High(Res)) and (Length(L + Res[i]) > FLengNoFiscalText) then
+        begin
+          if not PrintNotFiscalText(L) then Exit;
+          L := '';
+        end;
+        if I = High(Res) then
+        begin
+          if (Length(L + FormatCurr('0.000', Amount)) + 3) >= FLengNoFiscalText then
+          begin
+            if not PrintNotFiscalText(L) then Exit;;
+            L := StringOfChar(' ' , FLengNoFiscalText - Length(FormatCurr('0.000', Amount)) - 1) + FormatCurr('0.000', Amount);
+            if not PrintNotFiscalText(L) then Exit;
+          end else
+          begin
+            L := L + StringOfChar(' ' , FLengNoFiscalText - Length(L + FormatCurr('0.000', Amount)) - 1) + FormatCurr('0.000', Amount);
+            if not PrintNotFiscalText(L) then Exit;
+          end;
+        end;
+      end;
+
+      Exit;
+    end;
+
     // найти в таблице соответсвий
     if Table.Locate('GoodsCode;Price',VarArrayOf([GoodsCode, Price]),[]) then begin
        CashCode:=Table.FieldByName('CashCode').asInteger;
@@ -349,6 +393,7 @@ function TCashFP3530T.ProgrammingGoods(const GoodsCode: integer;
 var NDSType: Ansichar;
 begin
   result := true;
+  if not FisFiscal then Exit;
   try
     status:= 0;
     if NDS=0 then NDSType:='Б' else NDSType:='А';
diff --git a/FormsFarmacy/Cash/Cash_FP3530T_NEW.pas b/FormsFarmacy/Cash/Cash_FP3530T_NEW.pas
index bb38541f5..f5166494a 100644
--- a/FormsFarmacy/Cash/Cash_FP3530T_NEW.pas
+++ b/FormsFarmacy/Cash/Cash_FP3530T_NEW.pas
@@ -7,6 +7,8 @@ type
   private
     FAlwaysSold: boolean;
     FPrinter: IFiscPRN;
+    FisFiscal: boolean;
+    FLengNoFiscalText : integer;
     procedure SetAlwaysSold(Value: boolean);
     function GetAlwaysSold: boolean;
   protected
@@ -42,7 +44,7 @@ type
 
 
 implementation
-uses Forms, SysUtils, Dialogs, Math, Variants, BDE, StrUtils, IniUtils, Log;
+uses Forms, SysUtils, Dialogs, Math, Variants, BDE, StrUtils, IniUtils, RegularExpressions, Log;
 
 function СообщениеКА(k: string): boolean;
 begin
@@ -121,6 +123,7 @@ constructor TCashFP3530T_NEW.Create;
 begin
   inherited Create;
   FAlwaysSold:=false;
+  FLengNoFiscalText := 35;
   FPrinter := CoFiscPrn.Create;
   FPrinter.SETCOMPORT[StrToInt(iniPortNumber), StrToInt(iniPortSpeed)];
   СообщениеКА(FPrinter.GETERROR);
@@ -148,7 +151,8 @@ end;
 
 function TCashFP3530T_NEW.OpenReceipt(const isFiscal: boolean = true): boolean;
 begin
-  if isFiscal then
+  FisFiscal := isFiscal;
+  if FisFiscal then
      FPrinter.OPENFISKCHECK[1, 1, 0, Password]
   else
      FPrinter.OPENCHECK[Password];
@@ -178,10 +182,46 @@ end;
 function TCashFP3530T_NEW.SoldFromPC(const GoodsCode: integer; const GoodsName: string; const Amount, Price, NDS: double): boolean;
 var NDSType: char;
     CashCode: integer;
+    I : Integer;
+    L : string;
+    Res: TArray<string>;
 begin
   result := true;
   if FAlwaysSold then exit;
 
+    // печать нефискального чека
+  if not FisFiscal then
+  begin
+
+    L := '';
+    Res := TRegEx.Split(GoodsName, ' ');
+    for I := 0 to High(Res) do
+    begin
+      if L <> '' then L := L + ' ';
+      L := L + Res[i];
+      if (I < High(Res)) and (Length(L + Res[i]) > FLengNoFiscalText) then
+      begin
+        if not PrintNotFiscalText(L) then Exit;
+        L := '';
+      end;
+      if I = High(Res) then
+      begin
+        if (Length(L + FormatCurr('0.000', Amount)) + 3) >= FLengNoFiscalText then
+        begin
+          if not PrintNotFiscalText(L) then Exit;;
+          L := StringOfChar(' ' , FLengNoFiscalText - Length(FormatCurr('0.000', Amount)) - 1) + FormatCurr('0.000', Amount);
+          if not PrintNotFiscalText(L) then Exit;
+        end else
+        begin
+          L := L + StringOfChar(' ' , FLengNoFiscalText - Length(L + FormatCurr('0.000', Amount)) - 1) + FormatCurr('0.000', Amount);
+          if not PrintNotFiscalText(L) then Exit;
+        end;
+      end;
+    end;
+
+    Exit;
+  end;
+
   ProgrammingGoods(GoodsCode, Copy(GoodsName, 1, 20) , Price, NDS);
   result := SoldCode(GoodsCode, Amount, Price);
 end;
@@ -259,6 +299,8 @@ end;
 function TCashFP3530T_NEW.PrintNotFiscalText(
   const PrintText: WideString): boolean;
 begin
+  FPrinter.PRNCHECK[PrintText, Password];
+  result := СообщениеКА(FPrinter.GETERROR)
 end;
 
 function TCashFP3530T_NEW.PrintFiscalText(
-- 
2.16.2.windows.1

